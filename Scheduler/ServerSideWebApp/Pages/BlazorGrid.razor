@using Domain.UnitOfWork
@typeparam T

<table class="table">
    <thead>
        <tr class="jsgrid-grid-header">@GridHeader</tr>
    </thead>
    <tbody>
        @foreach (var item in ItemList)
        {
            <tr class="jsgrid-row-item" @onclick="@(() => OnClickTR.InvokeAsync(GetId(item)))">@GridRow(item)</tr>
        }
    </tbody>
</table>
<div>
    <button class="btn btn-outline-primary float-left" @onclick="NewItem">Add</button>

    <span class="pagebutton btn btn-link disabled float-right">Page @curPage of @totalPages</span>
    @*  Non funziona da capire flusso
        <button class="btn pagebutton btn-info float-right" @onclick='(() => SetPagerSize("forward"))'>&raquo;</button>
    *@
    <button class="btn pagebutton btn-secondary float-right" @onclick='(() => NavigateToPage("next"))'>Next</button>


    @for (int i = endPage; i >= startPage; i--)
    {
        var currentPage = i;
        <button class="btn pagebutton  float-right @(currentPage==curPage?"currentpage":"")" @onclick='(async () => UpdateList(currentPage))'>
            @currentPage
        </button>
    }


    <button class="btn pagebutton btn-secondary float-right" @onclick='(() => NavigateToPage("previous"))'>Prev</button>

    @* <button class="btn pagebutton btn-info float-right" @onclick='(() => SetPagerSize("back"))'>&laquo;</button>   *@


</div>

@code {

    int totalPages;
    int curPage;
    int pagerSize;
    int startPage;
    int endPage;

    [Parameter]
    public EventCallback<string> OnClickTR { get; set; }
    [Parameter]
    public EventCallback NewItem { get; set; }
    [Parameter]
    public RenderFragment GridHeader { get; set; }
    [Parameter]
    public RenderFragment<T> GridRow { get; set; }
    [Parameter]
    public IEnumerable<T> Items { get; set; }
    [Parameter]
    public int PageSize { get; set; }

    IEnumerable<T> ItemList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        pagerSize = 3;
        curPage = 1;

        ItemList = Items.Skip((curPage - 1) * PageSize).Take(PageSize);
        totalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);

        SetPagerSize("forward");
    }

    public void UpdateList(int currentPage)
    {
        ItemList = Items.Skip((currentPage - 1) * PageSize).Take(PageSize);
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage <= totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
            UpdateList(endPage);
        }
    }

    public void NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        UpdateList(curPage);
    }


    public string GetId(T obj)
    {
        IIdentity identity = obj as IIdentity;
        return identity.Id.ToString();
    }
}
