@page "/operator"
@using Domain
@inject Domain.Service.OperatorService OperatorService
@inject NavigationManager NavigationManager

<OperatorDetail operatore="@OperatoreDetail">
</OperatorDetail>


<div hidden="@ShowDetail">
    <h1>List operator</h1>

    @if (operators == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table table-hover">
            <thead class="thead-light">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Last name</th>
                    <th scope="col">First name</th>
                    <th scope="col">EMail</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in operators)
                {
                    <tr @ondblclick="@(e => DoubleClickRow(e, item))">
                        <td>@item.Id.ToString()</td>
                        <td>@item.LastName</td>
                        <td>@item.FirstName</td>
                        <td>@item.EMail</td>
                        <td @onclick="@(e => ClickEditRow(e, item))"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {

    bool ShowDetail { get { return OperatoreDetail.Id != 0; } }

    Domain.Operator OperatoreDetail = new Domain.Operator() { Id = 0, FirstName = "", LastName = "", EMail = "" };

    List<Domain.Operator> operators = new List<Domain.Operator>();

    void DoubleClickRow(MouseEventArgs e, Domain.Operator @operator)
    {
        OperatoreDetail = @operator;
    }

    void ClickEditRow(MouseEventArgs e, Domain.Operator @operator)
    {
         OperatoreDetail = @operator;
    }

    protected override async Task OnInitializedAsync()
    {
        operators = await OperatorService.GetOperatorsAsync();
    }
}
