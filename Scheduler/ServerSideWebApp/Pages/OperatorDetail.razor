@page "/operatorDetail"
@page "/operatorDetail/{Id:long}"
@inject Domain.Service.OperatorService OperatorService
@using Domain
@inject NavigationManager NavigationManager

<div>
    <h1>Operator detail</h1>
    <div>
        <p class="@UpdateResultCss">  @UpdateResult</p>
        <div class="form-row">
            <div class="form-group col-md-6">
                <label for="FirstName">Name</label>
                <input type="text" class="form-control" id="FirstName" @bind="operatore.FirstName" />
            </div>
            <div class="form-group col-md-6">
                <label for="LastName">Surname</label>
                <input type="text" class="form-control" id="LastName" @bind="operatore.LastName" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-12">
                <label for="EMail">Email</label>
                <input type="email" class="form-control" id="inputEmail" placeholder="Email" @bind="operatore.EMail" />
            </div>
        </div>
        <button @onclick="Update" class="btn btn-primary">Save</button>
        <button @onclick="Back" class="btn btn-secondary">Back</button>
    </div>
        
</div>


@code {

    [Parameter]
    public Domain.Operator operatore { get; set; } = new Domain.Operator() { Id = 0, FirstName = "", LastName = "", EMail = "" };

    [Parameter]
    public long Id { get; set; }

    string UpdateResult { get; set; }
    string UpdateResultCss { get; set; }



    void Update()
    {
        try
        {
            OperatorService.UpdateOperator(operatore);
            UpdateResultCss = "text-info";
            UpdateResult = "Operazione effettuata con successo";

        }
        catch (Exception err)
        {
            UpdateResultCss = "text-danger";
            UpdateResult = $"Si è verificato un errore: {err.Message}";           
        }
    }


    private void Back()
    {
        NavigationManager.NavigateTo("operator", true);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            operatore = Id != 0 ? await OperatorService.RetrieveOperatorAsync(Id) : new Domain.Operator() { Id = 0, FirstName = "", LastName = "", EMail = "" };
        }
        catch (Exception err)
        {
            System.Diagnostics.Debug.WriteLine(err.ToString());
            throw;
        }
    }
}
